---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { format } from 'date-fns';
import Tags from '../../components/Tags.astro';


export async function getStaticPaths() {
  const posts = await getCollection('posts', ({ data }) => {
    return import.meta.env.PROD ? data.draft !== true : true;
  });
  const tags = [...new Set(posts.flatMap(post => post.data.tags))];
  
  return tags.map(tag => ({
    params: { tag },
    props: { 
      posts: posts
        .filter(post => post.data.tags.includes(tag))
        .sort((a, b) => {
          const dateA = a.data.tendDate?.getTime() || a.data.pubDate.getTime();
          const dateB = b.data.tendDate?.getTime() || b.data.pubDate.getTime();
          return dateB - dateA; // Sort newest to oldest
        })
    },
  }));
}

const { tag } = Astro.params;
const { posts } = Astro.props;
---

<Layout>
  <div class="tag-page">
    <header>
      <h1 class="tertiary uppercase">{tag}s</h1>
    </header>
    <div class="posts grid gap-y-3">
      {posts.map(post => (
        <article class="post">
          <h3>
            <a href={`/p/${post.slug}`} class="post-link">{post.data.title}</a>
          </h3>
          <div class="grid">
            <div class="truncate lite">· · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · </div>
          </div>
          <time datetime={post.data.pubDate.toISOString()} class="small">
            { post.data.tendDate ? format(post.data.tendDate, 'MMM yyyy') : format(post.data.pubDate, 'MMM yyyy')}
          </time>
        </article>
      ))}
    </div>
  </div>
  <div class="spacer">
    <Tags />
    <div class="mt-4 mb-4 font-medium">
      <a href="/p">View everything <span class="inline-block relative text-2xl top-0.5">☞</span></a>
    </div>
  </div>
</Layout>